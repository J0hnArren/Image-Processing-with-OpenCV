## Работа 4. Детектирование области документа на кадрах видео
автор: Парчиев Р.Б.
дата: @time_stemp@

url: https://github.com/J0hnArren/Image-Processing-with-OpenCV/tree/main/prj.labs/lab04

### Задание
0. текст, иллюстрации и подписи отчета придумываем самостоятельно
1. самостоятельно снимаем видео смартфоном
- объект съемки - купюры (рубли разного номинала), расправленные и лежащие на поверхности (проективно искаженны прямоугольник)
- количество роликов - от 5 шт.
- длительность - 5-7 сек
- условия съемки разные
2. извлекаем по 3 кадра из каждого ролика (делим кол-во кадров на 5 и берем каждый с индеком 2/5,3/5,4/5)
3. цветоредуцируем изображения
4. бинаризуем изображения
5. морфологически обрабатываем изображения
6. выделяем основную компоненту связности
7. руками изготавливаем маски (идеальная зона купюры)
8. оцениваем качество выделение зоны и анализируем ошибки

### Результаты
В результате извлечения кадров указанным выше образом из 5 отснятых видео было извлечено по 3 изображения (рис.1):<br>

![](./results/frame2.png)
![](./results/frame8.png)
![](./results/frame15.png)
Рис. 1. Примеры исходных кадров из видео. <br><br>

Далее было применено цветоредуцирование (рис. 2):<br>

![](./results/grayscale_frame2.png)
![](./results/grayscale_frame8.png)
![](./results/grayscale_frame15.png)
Рис. 2. Цветоредуцированные изображения. <br><br>

Затем цветоредуцированные изображения бинаризуются при помощи глобальной бинаризации OTSU (рис. 3):<br> 

![](./results/bin_frame2.png)
![](./results/bin_frame8.png)
![](./results/bin_frame15.png)
Рис. 3. Бинаризированные изображения. <br><br>

В результате, к полученным изображениям применяются морфологические преобразования для удаления на них "шумов" и создания более гладких и правильных границ (Рис. 4).</br>
Используемые операции: close, opene и dilate.</br>

![](./results/morph_frame2.png)
![](./results/morph_frame8.png)
![](./results/morph_frame15.png)
Рис. 4. Морфологически обработанные изображения. <br><br>

Далее для получения маски производятся нахождение наибольшей по площади компоненты связности (КС), а остальные КС при этом закрашиваются в черный. Для закрашивания в белый цвет внутренних пикселей маски по белому изображению в горизонтальном направлении наносятся черные пиксели с двух сторон до момента когда встретится первый белый пиксель на маске(рис. 5):<br>

![](./results/improved_morph2.png)
![](./results/improved_morph8.png)
![](./results/improved_morph15.png)
Рис. 5. Полученные маски. <br><br>

Для проверки качества полученных созданных масок вручную задаются координаты эталонных маскок (рис. 6):<br>

![](./results/mask2.png)
![](./results/mask8.png)
![](./results/mask15.png)
Рис. 6. Эталонные маски. <br><br>

Для визуализации отличий маски накладываются на исходные кадры в разных цветовых каналах: (рис. 7):<br>
* Красный - программная маска
* Зеленый - эталонная маска
* Желтый - пересечение масок

![](./results/conc_frame2.png)
![](./results/conc_frame8.png)
![](./results/conc_frame15.png)
Рис. 7. Визуализация отличий трех масок. <br>

Для примеров рисунков использовались изображения под номером 2, 8 и 15 соответственно.
Подводя итог, можно легко заметить неточность во втором изображении, так как на нем был более сильный свет, однако на пером и третьем изображениях маски определены довольно точно.

В результате опытов, было замечено, что фоны со светлыми оттенками сильно понижают точность масок, а черный фон, напротив, делает купюру более различимой даже при интесивном освещении.

### Точность программных масок
Точностью программной маски относительно эталонной считается как отношение пересечения пикселей масок на их объединение. Данная оценка показывает коэффициент соответствия от 0 до 1, где близость к 1 показывается большую идентичность масок.

Ниже приведены точности для 15 изображений (по 3 кадра из 5 видео), где эталонные маски были вручную заданы под полученные изображения. 

_______________________________
| Название файла  | Точность  |
| ----------------|:---------:|
| frame_1.png     | 0.753731  |
| frame_2.png     | 0.89671   |
| frame_3.png     | 0.894071  |
| frame_4.png     | 0.899614  |
| frame_5.png     | 0.897403  |
| frame_6_.png    | 0.899915  |
| frame_7_.png    | 0.903     |
| frame_8_.png    | 0.884048  |
| frame_9_.png    | 0.882077  |
| frame_10.png    | 0.908172  |
| frame_11.png    | 0.903704  |
| frame_12.png    | 0.904756  |
| frame_13.png    | 0.888107  |
| frame_14.png    | 0.919185  |
| frame_15.png    | 0.926419  |
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯

### Текст программы

```cpp
@cpp_source@
```