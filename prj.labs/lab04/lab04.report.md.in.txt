## Работа 4. Детектирование области документа на кадрах видео
автор: Парчиев Р.Б. <br>
дата: @time_stemp@

url: https://github.com/J0hnArren/Image-Processing-with-OpenCV/tree/main/prj.labs/lab04

### Задание
0. текст, иллюстрации и подписи отчета придумываем самостоятельно
1. самостоятельно снимаем видео смартфоном
- объект съемки - купюры (рубли разного номинала), расправленные и лежащие на поверхности (проективно искаженны прямоугольник)
- количество роликов - от 5 шт.
- длительность - 5-7 сек
- условия съемки разные
2. извлекаем по 3 кадра из каждого ролика (делим кол-во кадров на 5 и берем каждый с индеком 2/5,3/5,4/5)
3. цветоредуцируем изображения
4. бинаризуем изображения
5. морфологически обрабатываем изображения
6. выделяем основную компоненту связности
7. руками изготавливаем маски (идеальная зона купюры)
8. оцениваем качество выделение зоны и анализируем ошибки

### Результаты
В результате извлечения кадров указанным выше образом из 5 отснятых видео было извлечено по 3 изображения (рис.1):<br>
<p float="left">
  <img src="./results/frame_2.png" width="31%" />
  <img src="./results/frame_8.png" width="31%" />
  <img src="./results/frame_15.png" width="31%" /> 
</p>

Рис. 1. Примеры исходных кадров из видео. <br><br>

Далее было применено цветоредуцирование при помощи функции cvtColor с параметром COLOR_BGRA2GRAY (рис. 2):<br>
<p float="left">
  <img src="./results/grayscale_frame_2.png" width="31%" />
  <img src="./results/grayscale_frame_8.png" width="31%" />
  <img src="./results/grayscale_frame_15.png" width="31%" /> 
</p>

Рис. 2. Цветоредуцированные изображения. <br><br>

Затем цветоредуцированные изображения бинаризуются при помощи Гауссовского блюра и глобальной бинаризации OTSU (рис. 3):<br> 
<p float="left">
  <img src="./results/bin_frame_2.png" width="31%" />
  <img src="./results/bin_frame_8.png" width="31%" />
  <img src="./results/bin_frame_15.png" width="31%" /> 
</p>

Рис. 3. Бинаризированные изображения. <br><br>

В результате, к полученным изображениям применяются морфологические преобразования для удаления на них "шумов" и создания более гладких и правильных границ (Рис. 4).</br>
Используемые операции: close, opene и dilate.</br>
<p float="left">
  <img src="./results/morph_frame_2.png" width="31%" />
  <img src="./results/morph_frame_8.png" width="31%" />
  <img src="./results/morph_frame_15.png" width="31%" /> 
</p>

Рис. 4. Морфологически обработанные изображения. <br>

Далее для получения маски производтся нахождение наибольшей по площади компоненты связности, а остальные при этом закрашиваются в черный. Для закрашивания в белый цвет внутренних пикселей маски по белому изображению в горизонтальном направлении наносятся черные пиксели с двух сторон до момента встречи первого белого пикселя на маске(рис. 5):<br>
<p float="left">
  <img src="./results/modify_morph_2.png" width="31%" />
  <img src="./results/modify_morph_8.png" width="31%" />
  <img src="./results/modify_morph_15.png" width="31%" /> 
</p>

Рис. 5. Полученные маски. <br>

Для проверки качества полученных созданных масок вручную задаются координаты эталонных маскок (рис. 6):<br>
<p float="left">
  <img src="./results/mask_2.png" width="31%" />
  <img src="./results/mask_8.png" width="31%" />
  <img src="./results/mask_15.png" width="31%" /> 
</p>

Рис. 6. Эталонные маски. <br>

Для визуализации отличий маски накладываются на исходные кадры в разных цветовых каналах: (рис. 7):<br>
* Красный - программная маска
* Зеленый - эталонная маска
* Желтый - пересечение масок
<p float="left">
  <img src="./results/concat_frame_2.png" width="31%" />
  <img src="./results/concat_frame_8.png" width="31%" />
  <img src="./results/concat_frame_15.png" width="31%" /> 
</p>

Рис. 7. Визуализация отличий трех масок. <br>

Для примеров рисунков использовались изображения под номером 2, 8 и 15 соответственно.
Подводя итог, можно легко заметить неточность во втором изображении, так как на нем был более сильный свет, однако на пером и третьем изображениях маски определены довольно точно.

В результате опытов, было замечено, что фоны со светлыми оттенками сильно понижают точность масок (рис. 8), а черный фон, напротив, делает купюру более различимой даже при интесивном освещении. <br>
<p float="left">
  <img src="./results/bin_frame_5.png" width="48%" />
  <img src="./results/modify_morph_5.png" width="48%" /> 
</p>

Рис. 8. Фрейм 5 с неудачным светлым фоном. <br>

### Точность программных масок
Точность вычисляется как Intersection over Union<br>
![](./data/IoU.jpg)

Пересечение (A ∩ B) состоит из пикселей, найденных как в маске предсказания, так и в основной маске истины, тогда как объединение (A ∪ B) просто состоит из всех пикселей, найденных либо в маске предсказания, либо в целевой маске.

Точностью программной маски относительно эталонной считается как отношение пересечения пикселей масок на их объединение. Данная оценка показывает коэффициент соответствия от 0 до 1, где близость к 1 показывается большую идентичность масок.

Ниже приведены точности для 15 изображений (по 3 кадра из 5 видео), где эталонные маски были вручную заданы под полученные изображения. 

______________________________
| Название файла  | Точность |
| ----------------|:--------:|
| frame_1.png     | 0.7537   |
| frame_2.png     | 0.8967   |
| frame_3.png     | 0.8940   |
| frame_4.png     | 0.7656   |
| frame_5.png     | 0.7420   |
| frame_6.png     | 0.7444   |
| frame_7.png     | 0.9030   |
| frame_8.png     | 0.8840   |
| frame_9.png     | 0.8821   |
| frame_10.png    | 0.9082   |
| frame_11.png    | 0.9037   |
| frame_12.png    | 0.9048   |
| frame_13.png    | 0.8881   |
| frame_14.png    | 0.9192   |
| frame_15.png    | 0.9264   |

Гистрограмма распределения полученных значений точности (рис. 9) <br>
![](./results/hist.jpg)

Рис. 9. Фрейм 5 с неудачным светлым фоном. <br>

Вывод: благодаря проведенным преобразованиям на черном фоне получилась довольно высокая точность, однако более светлый фон второго видео (4-6 фреймы) заметно пониизил точность.

### Текст программы

```cpp
@cpp_source@
```